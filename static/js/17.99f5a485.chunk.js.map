{"version":3,"sources":["components/SharedStyledComponents/Form.styled.ts","components/Rating/Rating.tsx","components/Rating/Rating.styled.ts","components/FilterForm/FilterForm.styled.ts","components/FilterForm/FilterForm.tsx","store/filters/actions.ts","components/SortingForm/SortingForm.styled.ts","components/SortingForm/SortingForm.tsx","store/sorting/actions.ts","components/Card/Card.styled.ts","components/Card/Card.tsx","views/ProfileList/ProfileList.styled.ts","views/ProfileList/ProfileList.tsx"],"names":["InfoBadge","styled","span","ErrorBadge","FormStyled","Form","BREAKPOINTS","md","sm","FormGroup","div","FormGroup2","FieldStyled","Field","COLORS","blue","ErrorMessageStyled","ErrorMessage","LabelStyled","label","SubmitButton","button","darkblue","light","FormInfo","Option","option","FormInfoContainer","Rating","props","rating","numberOfRatings","minValue","maxValue","roundedRating","Math","round","stars","i","push","key","active","toFixed","map","s","defaultProps","RatingStyled","RatingValue","Star","golden","gray","RatingNumber","FilterFormStyled","FormWrapper","ResetButton","options","value","cities","mapDispatchToProps","filter","data","action","FiltersActionTypes","FILTER","connect","state","filters","city","priceRange","services","initialValues","onSubmit","values","console","log","window","scrollTo","render","setFieldValue","touched","setFieldTouched","errors","onClick","min","max","name","component","c","index","onChange","onBlur","error","isMulti","classNamePrefix","placeholder","type","SortingFormStyled","sortingTypes","sort","SortingActionTypes","SORT","sorting","CardStyled","isPremium","lightgray","CardImageWrapper","CardContent","CardContentLeft","CardContentRight","CardName","CardCity","CardDescription","PremiumTag","Card","image","description","id","totalRating","profileURL","to","Avatar","isFull","url","ProfileListStyled","ListData","ListFilters","ListSorting","LoadMoreButton","blue2","ButtonWrapper","AllFetchedBadge","React","useState","profiles","setProfiles","isFetching","setIsFetching","allFetched","setAllFetched","useEffect","fetchProfiles","then","res","filterProfiles","ProfileApi","getProfiles","length","filteredProfiles","profile","self","indexOf","Fragment","item","owner","displayName","avatar","descr","ratings","BarLoader","fetchedProfiles"],"mappings":"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","file":"static/js/17.99f5a485.chunk.js","sourcesContent":["import styled from \"styled-components\";\nimport { Form, Field, ErrorMessage } from \"formik\";\nimport { COLORS, BREAKPOINTS } from \"../../styles/variables\";\n\nexport const InfoBadge = styled.span`\n    width: 100%;\n    padding: 0.8rem;\n    border-radius: 5px;\n    font-size: 1.4rem;\n    background: #fff87d;\n`;\n\nexport const ErrorBadge = styled.span`\n    width: 100%;\n    padding: 0.8rem;\n    font-size: 1.4rem;\n    border-radius: 5px;\n    color: white;\n    background: #ff4230;\n`;\n\nexport const FormStyled = styled(Form)`\n    -webkit-box-shadow: 0px 2px 10px 1px rgba(0, 0, 0, 0.2);\n    -moz-box-shadow: 0px 2px 10px 1px rgba(0, 0, 0, 0.2);\n    box-shadow: 0px 2px 10px 1px rgba(0, 0, 0, 0.2);\n\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    padding: 2rem;\n    font-size: 1.5rem;\n    width: 50%;\n\n    @media (max-width: ${BREAKPOINTS.md}) {\n        padding: 1rem;\n        width: 80%;\n    }\n    @media (max-width: ${BREAKPOINTS.sm}) {\n        padding: 1rem;\n        width: 100%;\n    }\n`;\n\nexport const FormGroup = styled.div`\n    margin-top: 1rem;\n    width: 100%;\n    position: relative;\n`;\n\nexport const FormGroup2 = styled.div`\n    margin-top: 1rem;\n    width: 100%;\n    position: relative;\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-gap: 1rem;\n`\n\nexport const FieldStyled = styled(Field)`\n    width: 100%;\n    background: none;\n    border: none;\n    box-sizing: border-box;\n    padding: 0.8rem;\n    border: 1px solid #ddd;\n    border-radius: 5px;\n    transition: all 0.2s;\n\n    :focus {\n        outline: none;\n        border: 1px solid ${COLORS.blue};\n        box-shadow: 0 0 5px ${COLORS.blue};\n    }\n\n    &[type=\"radio\"] {\n        outline: none;\n        border: none;\n        box-shadow: none;\n        cursor: pointer;\n        width: 1.6rem;\n        height: 1.6rem;\n    }\n`;\n\nexport const ErrorMessageStyled = styled(ErrorMessage)`\n    box-sizing: border-box;\n    width: 100%;\n    color: red;\n    padding: 0 0.8rem;\n    font-size: 1.2rem;\n`;\n\nexport const LabelStyled = styled.label`\n    box-sizing: border-box;\n    display: block;\n    width: 100%;\n    padding: 0 0.8rem;\n    font-size: 1.2rem;\n`;\n\ntype SubmitButtonProps = {\n    light?: boolean\n}\n\nexport const SubmitButton = styled.button<SubmitButtonProps>`\n    width: 100%;\n    background: none;\n    border: none;\n    padding: 1rem 2rem;\n    color: white;\n    cursor: pointer;\n    background: ${COLORS.blue};\n    border-radius: 5px;\n    transition: background 0.2s;\n\n    :hover {\n        background: ${COLORS.darkblue};\n    }\n\n    ${({ light }) =>\n        light && `\n            background: #226aff;\n            :hover {\n                background: #042bfc;\n            }\n        `\n    }\n`;\n\nexport const FormInfo = styled.div`\n    width: 100%;\n    font-weight: bold;\n`;\n\nexport const Option = styled.option`\n    \n`\nexport const FormInfoContainer = styled.div`\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    position: relative;\n    padding-bottom: 1rem;\n`","import React from \"react\";\nimport { Star, RatingNumber, RatingValue, RatingStyled } from \"./Rating.styled\";\n\nexport type Props = {\n    numberOfRatings: number | undefined;\n    rating: number;\n} & typeof defaultProps;\n\nconst defaultProps = {\n    minValue: 1,\n    maxValue: 5\n};\n\nconst Rating = (props: Props) => {\n    const { rating, numberOfRatings, minValue, maxValue } = props;\n    const roundedRating = Math.round(rating * 10) / 10;\n    let stars = [];\n    for (let i = minValue; i < maxValue + 1; i++) {\n        stars.push(\n            <Star key={i} active={roundedRating >= i}>\n                &#9733;\n            </Star>\n        );\n    }\n    return (\n        <RatingStyled>\n            <RatingValue>\n                {roundedRating.toFixed(1)} / {maxValue.toFixed(1)}\n            </RatingValue>\n            <div>\n                {stars.map(s => {\n                    return s;\n                })}\n            </div>\n            {numberOfRatings && <RatingNumber>({numberOfRatings})</RatingNumber>}\n        </RatingStyled>\n    );\n};\n\nRating.defaultProps = defaultProps;\n\nexport default Rating;\n","import styled from \"styled-components\";\nimport { COLORS, BREAKPOINTS } from \"../../styles/variables\";\n\nexport const RatingStyled = styled.div`\n    display: inline-flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: row;\n    padding: 0.5rem;\n`;\n\nexport const RatingValue = styled.span`\n    font-size: 1.2rem;\n    margin-right: 0.2rem;\n    width: 5rem;\n`;\n\nexport type StarProps = {\n    active: boolean\n}\n\nexport const Star = styled.span<StarProps>`\n    font-size: 2.4rem;\n    @media (max-width: ${BREAKPOINTS.md}) {\n        font-size: 1.6rem;\n    }\n    color: ${props => (props.active ? COLORS.golden : COLORS.gray)};\n    vertical-align: top;\n`;\n\nexport const RatingNumber = styled.span`\n    font-size: 1.2rem;\n    margin-left: 0.2rem;\n`;\n","import styled from 'styled-components';\nimport { Form } from 'formik';\n\nexport const FilterFormStyled = styled(Form)`\n    \n`\n\nexport const FormWrapper = styled.div`\n    top: 1rem;\n    position: sticky;\n`\n\nexport const ResetButton = styled.button`\n\n`","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Formik, Field, Form } from \"formik\";\nimport InputRange from \"react-input-range\";\nimport Select from \"react-select\";\nimport { ApplicationState } from \"../../store\";\nimport { filter } from \"../../store/filters/actions\";\nimport { FiltersState } from \"../../store/filters/types\";\nimport { FilterFormStyled, ResetButton, FormWrapper } from \"./FilterForm.styled\";\nimport { SubmitButton, FormGroup } from \"../SharedStyledComponents/Form.styled\";\nimport \"react-input-range/lib/css/index.css\";\n\nconst options = [\n    { value: 1, label: \"Konsultacja wstępna\" },\n    { value: 2, label: \"Konsultacja kontrolna\" },\n    { value: 3, label: \"Zakupy z dietetykiem\" },\n    { value: 4, label: \"Dedykowany jadłospis\" },\n    { value: 5, label: \"Pomiary\" },\n    { value: 6, label: \"Testy FoodDetective\" }\n];\n\nconst cities = [\n    { label: \"Warszawa\", value: \"Warszawa\" },\n    { label: \"Łódź\", value: \"Łódź\" },\n    { label: \"Poznań\", value: \"Poznań\" },\n    { label: \"Gdańsk\", value: \"Gdańsk\" },\n    { label: \"Sopot\", value: \"Sopot\" },\n    { label: \"Gdynia\", value: \"Gdynia\" }\n];\n\ntype Props = ReturnType<typeof mapStateToProps> & typeof mapDispatchToProps;\n\nconst FilterForm = (props: Props) => {\n    //filtry: miasto, cena - przedział, usługi: lista\n    let { city, priceRange, services } = props.filters;\n\n    return (\n        <Formik\n            initialValues={{\n                city: city,\n                priceRange: priceRange,\n                services: services\n            }}\n            onSubmit={(values: FiltersState) => {\n                console.log(values);\n                props.filter(values);\n                window.scrollTo(0, 0);\n            }}\n            render={({ setFieldValue, values, touched, setFieldTouched, errors }) => (\n                <FormWrapper>\n                    <FormGroup>\n                        <ResetButton\n                            onClick={() => {\n                                setFieldValue(\"priceRange\", {\n                                    min: 0,\n                                    max: 200\n                                });\n                                setFieldValue(\"city\", \"All\");\n                                setFieldValue(\"services\", []);\n                                const values = {\n                                    city: \"All\",\n                                    services: [],\n                                    priceRange: {\n                                        min: 0,\n                                        max: 200\n                                    }\n                                };\n                                props.filter(values);\n                            }}\n                        >\n                            Resetuj filtry\n                        </ResetButton>\n                    </FormGroup>\n\n                    <FilterFormStyled>\n                        <FormGroup>\n                            <Field name=\"city\" component=\"select\">\n                                {cities.map((c, index) => {\n                                    return (\n                                        <option key={index} value={c.value}>\n                                            {c.label}\n                                        </option>\n                                    );\n                                })}\n                                <option value=\"All\">Wszystkie</option>\n                            </Field>\n                        </FormGroup>\n                        <FormGroup>\n                            <InputRange\n                                maxValue={300}\n                                minValue={0}\n                                name=\"priceRange\"\n                                value={values.priceRange}\n                                onChange={(value: any) => setFieldValue(\"priceRange\", value)}\n                            />\n                        </FormGroup>\n                        <FormGroup>\n                            <Select\n                                value={values.services}\n                                onChange={(value: any) => setFieldValue(\"services\", value)}\n                                onBlur={() => setFieldTouched(\"services\", true)}\n                                error={errors.services}\n                                touched={touched.services}\n                                isMulti\n                                options={options}\n                                classNamePrefix=\"react-select\"\n                                placeholder=\"Usługi\"\n                            />\n                        </FormGroup>\n                        <FormGroup>\n                            <SubmitButton type=\"submit\">Filtruj</SubmitButton>\n                        </FormGroup>\n                    </FilterFormStyled>\n                </FormWrapper>\n            )}\n        />\n    );\n};\n\nconst mapStateToProps = (state: ApplicationState) => {\n    return { filters: state.filters };\n};\n\nconst mapDispatchToProps = {\n    filter\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FilterForm);\n","import { action } from \"typesafe-actions\";\nimport { FiltersActionTypes, FiltersState } from \"./types\";\n\nexport const filter = (data: FiltersState) => action(FiltersActionTypes.FILTER, data);\n","import styled from 'styled-components'\nimport { Form } from 'formik';\n\nexport const SortingFormStyled = styled(Form)`\n    position: sticky;\n    top: 1rem\n`\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Formik, Field, Form } from \"formik\";\nimport { ApplicationState } from \"../../store\";\nimport { SortingFormStyled } from \"./SortingForm.styled\";\nimport { Option, SubmitButton, FormGroup } from \"../SharedStyledComponents/Form.styled\";\nimport { sort } from \"../../store/sorting/actions\";\n\ntype Props = ReturnType<typeof mapStateToProps> & typeof mapDispatchToProps;\n\nconst sortingTypes = [\n    { value: \"POPULARITY_ASC\", label: \"Popularność - rosnąco\" },\n    { value: \"POPULARITY_DESC\", label: \"Popularność - malejąco\" },\n    { value: \"DATE_ASC\", label: \"Data - rosnąco\" },\n    { value: \"DATE_DESC\", label: \"Data - malejąco\" }\n];\n\nconst SortingForm = (props: Props) => {\n    let { sorting } = props.sorting;\n\n    return (\n        <Formik\n            initialValues={{\n                sorting: sorting\n            }}\n            onSubmit={(values: any) => {\n                console.log(values);\n                props.sort(values.sorting);\n            }}\n            render={() => (\n                <SortingFormStyled>\n                    <FormGroup>\n                        <Field name=\"sorting\" component=\"select\">\n                            {sortingTypes.map((s, index) => {\n                                return (\n                                    <Option value={s.value} key={index}>\n                                        {s.label}\n                                    </Option>\n                                );\n                            })}\n                        </Field>\n                    </FormGroup>\n                    <FormGroup>\n                        <SubmitButton type=\"submit\">Sortuj</SubmitButton>\n                    </FormGroup>\n                </SortingFormStyled>\n            )}\n        />\n    );\n};\n\nconst mapStateToProps = (state: ApplicationState) => {\n    return { sorting: state.sorting };\n};\n\nconst mapDispatchToProps = {\n    sort\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SortingForm);\n","import { action } from \"typesafe-actions\";\nimport { SortingActionTypes, SortingState } from \"./types\";\n\nexport const sort = (data: SortingState) => action(SortingActionTypes.SORT, data);\n","import styled from 'styled-components';\nimport { COLORS, BREAKPOINTS } from '../../styles/variables';\n\ntype CardStyledProps = {\n    isPremium: boolean\n}\n\nexport const CardStyled = styled.div<CardStyledProps>`\n    padding: 1rem;\n    margin: 0.5rem;\n    /* border: 1px solid ${props => props.isPremium ? COLORS.golden : COLORS.lightgray}; */\n    border: 1px solid #ddd;\n    border-radius: 4px;\n    display: flex;\n    flex-direction: row;\n    box-sizing: border-box;\n    background: white;\n\n    -webkit-box-shadow: 0px 1px 10px 1px rgba(0, 0, 0, 0.15);\n    -moz-box-shadow: 0px 1px 10px 1px rgba(0, 0, 0, 0.15);\n    box-shadow: 0px 1px 10px 1px rgba(0, 0, 0, 0.15);\n\n    height: 18rem;\n\n    @media (max-width: ${BREAKPOINTS.md}) {\n        height: 22rem;\n    }\n\n    :hover {\n        background: #f6f6f6;\n    }\n`\n\nexport const CardImageWrapper = styled.div`\n    width: 16rem;\n    height: 16rem;\n\n    @media (max-width: ${BREAKPOINTS.md}) {\n        width: 10rem;\n        height: 10rem;\n    }\n`\n\nexport const CardContent = styled.div`\n    display: flex;\n        flex-direction: row;\n        justify-content: space-between;\n        width: 100%;\n\n        @media (max-width: ${BREAKPOINTS.md}) {\n            flex-direction: column;\n        }\n`\n\nexport const CardContentLeft = styled.div`\n    padding: 0 1rem;\n`\n\nexport const CardContentRight = styled.div`\n        display: flex;\n        flex-direction: column;\n        justify-content: space-between;\n        align-items: flex-end;\n\n        @media (max-width: ${BREAKPOINTS.md}) {\n            flex-direction: row;\n            align-items: flex-start;\n        }\n`\n\nexport const CardName = styled.span`\nfont-weight: bold;\n        font-size: 2rem;\n`\n\nexport const CardCity = styled.span`\ncolor: gray;\n        display: block;\n`\n\nexport const CardDescription = styled.div`\n    overflow: hidden;\n    position: relative;\n    line-height: 1.2em;\n    max-height: 6em;\n    text-align: justify;    \n    margin-right: -1em;\n    padding-right: 1em;\n\n    &:before {\n        content: '...';\n        position: absolute;\n        right: 0;\n        bottom: 0;\n        right: 1rem;\n        background-color: white;\n    }\n    &:after {\n        content: '';\n        position: absolute;\n        right: 0;\n        width: 1em;\n        height: 1em;\n        margin-top: 0.2em;\n        background: white;\n    }\n`\n\nexport const PremiumTag = styled.div`\n    color: ${COLORS.golden};\n`","import React from \"react\";\nimport Rating from \"../Rating/Rating\";\nimport { Link } from \"react-router-dom\";\nimport { CardStyled, CardImageWrapper, CardContent, CardContentLeft, CardContentRight, CardDescription, CardCity, PremiumTag, CardName } from \"./Card.styled\";\nimport Avatar from \"../Avatar/Avatar\";\nimport { LinkStyled } from \"../Navbar/Navbar.styled\";\n\ntype Props = {\n    name: string;\n    image: string;\n    city: string;\n    isPremium: boolean;\n    description: string;\n    numberOfRatings: number;\n    id: string;\n    totalRating: number;\n};\n\nconst Card = (props: Props) => {\n    const { name, image, city, isPremium, description, numberOfRatings, id, totalRating } = props;\n    const profileURL = \"/profile/\" + id;\n    return (\n        <CardStyled isPremium={isPremium}>\n            <Link to={profileURL}>\n                <CardImageWrapper>\n                    <Avatar isFull={true} url={image}></Avatar>\n                </CardImageWrapper>\n            </Link>\n            <CardContent>\n                <CardContentLeft>\n                    <CardName>\n                        <LinkStyled to={profileURL}>{name}</LinkStyled>\n                    </CardName>\n                    {isPremium && <PremiumTag>&#10004;</PremiumTag>}\n                    <CardCity>{city}</CardCity>\n                    <CardDescription>{description}</CardDescription>\n                </CardContentLeft>\n                <CardContentRight>\n                    <Rating rating={totalRating} numberOfRatings={numberOfRatings} />\n                    <LinkStyled to={profileURL}>Zobacz wiecej</LinkStyled>\n                </CardContentRight>\n            </CardContent>\n        </CardStyled>\n    );\n};\n\nexport default Card;\n","import styled from 'styled-components';\nimport { NAV_HEIGHT, COLORS, BREAKPOINTS } from '../../styles/variables';\n\nexport const ProfileListStyled = styled.div`\n    position: relative;\n    width: 100%;\n    height: 100%;\n    display: grid;\n    grid-template-columns: 1fr 2fr 1fr;\n\n    @media (max-width: ${BREAKPOINTS.md}) {\n        display: flex;\n        flex-direction: column;\n    }\n`\n\nexport const ListData = styled.div`\n    border-left: 1px solid #ccc;\n    border-right: 1px solid #ccc;\n    box-sizing: border-box;\n`\n\nexport const ListFilters = styled.div`\n    padding: 1rem 2rem;\n    box-sizing: border-box;\n    height: 100%;\n`\n\nexport const ListSorting = styled.div`\n    padding: 1rem 2rem;\n    box-sizing: border-box;\n    height: 100%;\n`\n\nexport const LoadMoreButton = styled.button`\n    border: 1px solid ${COLORS.blue2};\n    background: ${COLORS.blue};\n    color: white;\n    padding: 1rem 2rem;\n    border-radius: 6px;\n    font-size: 1.5rem;\n    font-weight: bold;\n    cursor: pointer;\n`\n\nexport const ButtonWrapper = styled.div`\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: 2rem 0;\n`\nexport const AllFetchedBadge = styled.div`\n    border-bottom: 1px solid ${COLORS.blue};\n    color: ${COLORS.blue};\n    padding: 1rem 2rem;\n    font-size: 1.5rem;\n    font-weight: bold;\n`","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport FilterForm from \"../../components/FilterForm/FilterForm\";\nimport SortingForm from \"../../components/SortingForm/SortingForm\";\nimport Card from \"../../components/Card/Card\";\nimport BottomScrollListener from \"react-bottom-scroll-listener\";\nimport {\n    ListData,\n    ListFilters,\n    ListSorting,\n    ProfileListStyled,\n    LoadMoreButton,\n    ButtonWrapper,\n    AllFetchedBadge\n} from \"./ProfileList.styled\";\n\nimport { Profile as ProfileApi } from \"../../api\";\nimport Loader from \"../../components/Loader/Loader\";\nimport { ApplicationState } from \"../../store\";\nimport BarLoader from \"../../components/BarLoader/BarLoader\";\n\ntype Props = ReturnType<typeof mapStateToProps>;\n\nconst ProfileList = (props: Props) => {\n    const [profiles, setProfiles] = React.useState([] as any[]);\n    const [isFetching, setIsFetching] = React.useState(false);\n    const [allFetched, setAllFetched] = React.useState(false);\n\n    useEffect(() => {\n        setIsFetching(true);\n        fetchProfiles().then(res => {\n            console.log(res);\n\n            const profiles = filterProfiles(res.data.profiles);\n            setProfiles(profiles);\n            setIsFetching(false);\n        });\n    }, []);\n\n    // useEffect(() => {\n    //     const filters = props.filters;\n    //     const prevFilters = usePrevious({ filters });\n    //     if (prevFilters !== filters) {\n    //         console.log(\"update\");\n    //         setAllFetched(true);\n    //         filterProfilesInState();\n    //     }\n    // }, [props.filters]);\n\n    const fetchProfiles = () => {\n        return ProfileApi.getProfiles(profiles.length, props.filters);\n    };\n\n    const filterProfilesInState = () => {\n        setProfiles(filterProfiles(profiles));\n    };\n\n    const filterProfiles = (profiles: any) => {\n        //to do add more filters\n        let filteredProfiles = profiles\n            .map((profile: any) => profile.id)\n            .filter((value: any, index: any, self: any) => self.indexOf(value) === index); //only unique in case there are two equal profiles\n\n        filteredProfiles = filteredProfiles.filter((profile: any) => {\n            return profile.city === props.filters.city; //city\n        });\n\n        return profiles;\n    };\n\n    const tryFetchMore = () => {\n        if (!isFetching && !allFetched) {\n            setIsFetching(true);\n            fetchProfiles().then(res => {\n                console.log(res);\n                const fetchedProfiles = res.data.profiles;\n\n                if (fetchedProfiles.length === 0) {\n                    setAllFetched(true);\n                    setIsFetching(false);\n                } else {\n                    setProfiles(filterProfiles([...profiles, ...fetchedProfiles]));\n                    setIsFetching(false);\n                }\n            });\n        }\n    };\n\n    return (\n        <React.Fragment>\n            <ProfileListStyled>\n                <ListFilters>\n                    <FilterForm />\n                </ListFilters>\n                <ListData>\n                    {profiles.map((item: any) => (\n                        <Card\n                            key={item.id}\n                            name={item.owner.displayName}\n                            image={item.owner.avatar}\n                            isPremium={false}\n                            city={item.city}\n                            description={item.descr}\n                            numberOfRatings={item.ratings.length}\n                            totalRating={item.totalRating}\n                            id={item.id}\n                        />\n                    ))}\n                    {isFetching && <BarLoader />}\n                    <ButtonWrapper>\n                        {!isFetching &&\n                            (allFetched ? (\n                                <AllFetchedBadge>Pobrano wszystkie profile</AllFetchedBadge>\n                            ) : (\n                                <LoadMoreButton onClick={tryFetchMore}>Załaduj więcej</LoadMoreButton>\n                            ))}\n                    </ButtonWrapper>\n                </ListData>\n                <ListSorting>\n                    <SortingForm />\n                </ListSorting>\n            </ProfileListStyled>\n\n            {/* <BottomScrollListener onBottom={tryFetchMore} offset={100} /> */}\n        </React.Fragment>\n    );\n};\n\nconst mapStateToProps = (state: ApplicationState) => {\n    return { filters: state.filters };\n};\n\nexport default connect(mapStateToProps, null)(ProfileList);\n"],"sourceRoot":""}