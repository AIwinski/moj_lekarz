{"version":3,"sources":["components/SharedStyledComponents/Form.styled.ts","components/Rating/Rating.tsx","components/Rating/Rating.styled.ts","components/FilterForm/FilterForm.styled.ts","components/FilterForm/FilterForm.tsx","store/filters/actions.ts","components/SortingForm/SortingForm.styled.ts","components/SortingForm/SortingForm.tsx","store/sorting/actions.ts","components/Card/Card.styled.ts","components/Card/Card.tsx","views/ProfileList/ProfileList.styled.ts","views/ProfileList/ProfileList.tsx"],"names":["InfoBadge","styled","span","ErrorBadge","FormStyled","Form","BREAKPOINTS","md","sm","FormGroup","div","FormGroup2","FieldStyled","Field","COLORS","blue","ErrorMessageStyled","ErrorMessage","LabelStyled","label","SubmitButton","button","darkblue","light","FormInfo","Option","option","FormInfoContainer","Rating","props","rating","numberOfRatings","minValue","maxValue","roundedRating","Math","round","stars","i","push","key","active","toFixed","map","s","defaultProps","RatingStyled","RatingValue","Star","golden","gray","RatingNumber","FilterFormStyled","FormWrapper","options","value","cities","mapDispatchToProps","filter","data","action","FiltersActionTypes","FILTER","connect","state","filters","city","priceRange","services","initialValues","onSubmit","values","console","log","window","scrollTo","render","setFieldValue","touched","setFieldTouched","errors","onClick","min","max","htmlFor","name","component","c","index","onChange","onBlur","error","isMulti","classNamePrefix","placeholder","type","SortingFormStyled","sortingTypes","sort","SortingActionTypes","SORT","sorting","CardStyled","isPremium","lightgray","CardImageWrapper","CardContent","CardContentLeft","CardContentRight","CardName","CardCity","CardDescription","PremiumTag","Card","image","description","id","totalRating","profileURL","to","Avatar","isFull","url","ProfileListStyled","ListData","ListFilters","ListSorting","LoadMoreButton","blue2","ButtonWrapper","AllFetchedBadge","React","useState","profiles","setProfiles","isFetching","setIsFetching","allFetched","setAllFetched","useEffect","fetchProfiles","then","res","filterProfiles","ProfileApi","getProfiles","length","filteredProfiles","profile","self","indexOf","Fragment","item","owner","displayName","avatar","descr","ratings","BarLoader","fetchedProfiles"],"mappings":"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","file":"static/js/17.2bba4722.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\nimport { Form, Field, ErrorMessage } from \"formik\";\r\nimport { COLORS, BREAKPOINTS } from \"../../styles/variables\";\r\n\r\nexport const InfoBadge = styled.span`\r\n    width: 100%;\r\n    padding: 0.8rem;\r\n    border-radius: 5px;\r\n    font-size: 1.4rem;\r\n    background: #fff87d;\r\n`;\r\n\r\nexport const ErrorBadge = styled.span`\r\n    width: 100%;\r\n    padding: 0.8rem;\r\n    font-size: 1.4rem;\r\n    border-radius: 5px;\r\n    color: white;\r\n    background: #ff4230;\r\n`;\r\n\r\nexport const FormStyled = styled(Form)`\r\n    -webkit-box-shadow: 0px 2px 10px 1px rgba(0, 0, 0, 0.2);\r\n    -moz-box-shadow: 0px 2px 10px 1px rgba(0, 0, 0, 0.2);\r\n    box-shadow: 0px 2px 10px 1px rgba(0, 0, 0, 0.2);\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    padding: 2rem;\r\n    font-size: 1.5rem;\r\n    width: 50%;\r\n\r\n    @media (max-width: ${BREAKPOINTS.md}) {\r\n        padding: 1rem;\r\n        width: 80%;\r\n    }\r\n    @media (max-width: ${BREAKPOINTS.sm}) {\r\n        padding: 1rem;\r\n        width: 100%;\r\n    }\r\n`;\r\n\r\nexport const FormGroup = styled.div`\r\n    margin-top: 1rem;\r\n    width: 100%;\r\n    position: relative;\r\n`;\r\n\r\nexport const FormGroup2 = styled.div`\r\n    margin-top: 1rem;\r\n    width: 100%;\r\n    position: relative;\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    grid-gap: 1rem;\r\n`\r\n\r\nexport const FieldStyled = styled(Field)`\r\n    width: 100%;\r\n    background: none;\r\n    border: none;\r\n    box-sizing: border-box;\r\n    padding: 0.8rem;\r\n    border: 1px solid #ddd;\r\n    border-radius: 5px;\r\n    transition: all 0.2s;\r\n\r\n    :focus {\r\n        outline: none;\r\n        border: 1px solid ${COLORS.blue};\r\n        box-shadow: 0 0 5px ${COLORS.blue};\r\n    }\r\n\r\n    &[type=\"radio\"] {\r\n        outline: none;\r\n        border: none;\r\n        box-shadow: none;\r\n        cursor: pointer;\r\n        width: 1.6rem;\r\n        height: 1.6rem;\r\n    }\r\n`;\r\n\r\nexport const ErrorMessageStyled = styled(ErrorMessage)`\r\n    box-sizing: border-box;\r\n    width: 100%;\r\n    color: red;\r\n    padding: 0 0.8rem;\r\n    font-size: 1.2rem;\r\n`;\r\n\r\nexport const LabelStyled = styled.label`\r\n    box-sizing: border-box;\r\n    display: block;\r\n    width: 100%;\r\n    padding: 0 0.8rem;\r\n    font-size: 1.2rem;\r\n`;\r\n\r\ntype SubmitButtonProps = {\r\n    light?: boolean\r\n}\r\n\r\nexport const SubmitButton = styled.button<SubmitButtonProps>`\r\n    width: 100%;\r\n    background: none;\r\n    border: none;\r\n    padding: 1rem 2rem;\r\n    color: white;\r\n    cursor: pointer;\r\n    background: ${COLORS.blue};\r\n    border-radius: 5px;\r\n    transition: background 0.2s;\r\n\r\n    :hover {\r\n        background: ${COLORS.darkblue};\r\n    }\r\n\r\n    ${({ light }) =>\r\n        light && `\r\n            background: #226aff;\r\n            :hover {\r\n                background: #042bfc;\r\n            }\r\n        `\r\n    }\r\n`;\r\n\r\nexport const FormInfo = styled.div`\r\n    width: 100%;\r\n    font-weight: bold;\r\n`;\r\n\r\nexport const Option = styled.option`\r\n    \r\n`\r\nexport const FormInfoContainer = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    position: relative;\r\n    padding-bottom: 1rem;\r\n`","import React from \"react\";\r\nimport { Star, RatingNumber, RatingValue, RatingStyled } from \"./Rating.styled\";\r\n\r\nexport type Props = {\r\n    numberOfRatings: number | undefined;\r\n    rating: number;\r\n} & typeof defaultProps;\r\n\r\nconst defaultProps = {\r\n    minValue: 1,\r\n    maxValue: 5\r\n};\r\n\r\nconst Rating = (props: Props) => {\r\n    const { rating, numberOfRatings, minValue, maxValue } = props;\r\n    const roundedRating = Math.round(rating * 10) / 10;\r\n    let stars = [];\r\n    for (let i = minValue; i < maxValue + 1; i++) {\r\n        stars.push(\r\n            <Star key={i} active={roundedRating >= i}>\r\n                &#9733;\r\n            </Star>\r\n        );\r\n    }\r\n    return (\r\n        <RatingStyled>\r\n            <RatingValue>\r\n                {roundedRating.toFixed(1)} / {maxValue.toFixed(1)}\r\n            </RatingValue>\r\n            <div>\r\n                {stars.map(s => {\r\n                    return s;\r\n                })}\r\n            </div>\r\n            {numberOfRatings && <RatingNumber>({numberOfRatings})</RatingNumber>}\r\n        </RatingStyled>\r\n    );\r\n};\r\n\r\nRating.defaultProps = defaultProps;\r\n\r\nexport default Rating;\r\n","import styled from \"styled-components\";\r\nimport { COLORS, BREAKPOINTS } from \"../../styles/variables\";\r\n\r\nexport const RatingStyled = styled.div`\r\n    display: inline-flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: row;\r\n    padding: 0.5rem;\r\n`;\r\n\r\nexport const RatingValue = styled.span`\r\n    font-size: 1.2rem;\r\n    margin-right: 0.2rem;\r\n    width: 5rem;\r\n`;\r\n\r\nexport type StarProps = {\r\n    active: boolean\r\n}\r\n\r\nexport const Star = styled.span<StarProps>`\r\n    font-size: 2.4rem;\r\n    @media (max-width: ${BREAKPOINTS.md}) {\r\n        font-size: 1.6rem;\r\n    }\r\n    color: ${props => (props.active ? COLORS.golden : COLORS.gray)};\r\n    vertical-align: top;\r\n`;\r\n\r\nexport const RatingNumber = styled.span`\r\n    font-size: 1.2rem;\r\n    margin-left: 0.2rem;\r\n`;\r\n","import styled from 'styled-components';\r\nimport { Form } from 'formik';\r\n\r\nexport const FilterFormStyled = styled(Form)`\r\n    \r\n`\r\n\r\nexport const FormWrapper = styled.div`\r\n    top: 1rem;\r\n    position: sticky;\r\n`\r\n\r\nexport const ResetButton = styled.button`\r\n\r\n`","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Formik, Field, Form } from \"formik\";\r\nimport InputRange from \"react-input-range\";\r\nimport Select from \"react-select\";\r\nimport { ApplicationState } from \"../../store\";\r\nimport { filter } from \"../../store/filters/actions\";\r\nimport { FiltersState } from \"../../store/filters/types\";\r\nimport { FilterFormStyled, ResetButton, FormWrapper } from \"./FilterForm.styled\";\r\nimport { SubmitButton, FormGroup, LabelStyled } from \"../SharedStyledComponents/Form.styled\";\r\nimport \"react-input-range/lib/css/index.css\";\r\n\r\nconst options = [\r\n    { value: 1, label: \"Konsultacja wstępna\" },\r\n    { value: 2, label: \"Konsultacja kontrolna\" },\r\n    { value: 3, label: \"Zakupy z dietetykiem\" },\r\n    { value: 4, label: \"Dedykowany jadłospis\" },\r\n    { value: 5, label: \"Pomiary\" },\r\n    { value: 6, label: \"Testy FoodDetective\" }\r\n];\r\n\r\nconst cities = [\r\n    { label: \"Warszawa\", value: \"Warszawa\" },\r\n    { label: \"Łódź\", value: \"Łódź\" },\r\n    { label: \"Poznań\", value: \"Poznań\" },\r\n    { label: \"Gdańsk\", value: \"Gdańsk\" },\r\n    { label: \"Sopot\", value: \"Sopot\" },\r\n    { label: \"Gdynia\", value: \"Gdynia\" }\r\n];\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> & typeof mapDispatchToProps;\r\n\r\nconst FilterForm = (props: Props) => {\r\n    //filtry: miasto, cena - przedział, usługi: lista\r\n    let { city, priceRange, services } = props.filters;\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                city: city,\r\n                priceRange: priceRange,\r\n                services: services\r\n            }}\r\n            onSubmit={(values: FiltersState) => {\r\n                console.log(values);\r\n                props.filter(values);\r\n                window.scrollTo(0, 0);\r\n            }}\r\n            render={({ setFieldValue, values, touched, setFieldTouched, errors }) => (\r\n                <FormWrapper>\r\n                    <FormGroup>\r\n                        <SubmitButton\r\n                            onClick={() => {\r\n                                setFieldValue(\"priceRange\", {\r\n                                    min: 0,\r\n                                    max: 200\r\n                                });\r\n                                setFieldValue(\"city\", \"All\");\r\n                                setFieldValue(\"services\", []);\r\n                                const values = {\r\n                                    city: \"All\",\r\n                                    services: [],\r\n                                    priceRange: {\r\n                                        min: 0,\r\n                                        max: 200\r\n                                    }\r\n                                };\r\n                                props.filter(values);\r\n                            }}\r\n                        >\r\n                            Resetuj filtry\r\n                        </SubmitButton>\r\n                    </FormGroup>\r\n\r\n                    <FilterFormStyled>\r\n                        <FormGroup>\r\n                        <LabelStyled htmlFor=\"city\">Miasto</LabelStyled>\r\n                            <Field name=\"city\" component=\"select\">\r\n                                {cities.map((c, index) => {\r\n                                    return (\r\n                                        <option key={index} value={c.value}>\r\n                                            {c.label}\r\n                                        </option>\r\n                                    );\r\n                                })}\r\n                                <option value=\"All\">Wszystkie</option>\r\n                            </Field>\r\n                        </FormGroup>\r\n                        {/* <FormGroup>\r\n                            <InputRange\r\n                                maxValue={300}\r\n                                minValue={0}\r\n                                name=\"priceRange\"\r\n                                value={values.priceRange}\r\n                                onChange={(value: any) => setFieldValue(\"priceRange\", value)}\r\n                            />\r\n                        </FormGroup> */}\r\n                        <FormGroup>\r\n                        <LabelStyled htmlFor=\"uslugi\">Usługi</LabelStyled>\r\n                            <Select\r\n                                value={values.services}\r\n                                onChange={(value: any) => setFieldValue(\"services\", value)}\r\n                                onBlur={() => setFieldTouched(\"services\", true)}\r\n                                error={errors.services}\r\n                                touched={touched.services}\r\n                                isMulti\r\n                                options={options}\r\n                                classNamePrefix=\"react-select\"\r\n                                placeholder=\"Usługi\"\r\n                            />\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <SubmitButton type=\"submit\">Filtruj</SubmitButton>\r\n                        </FormGroup>\r\n                    </FilterFormStyled>\r\n                </FormWrapper>\r\n            )}\r\n        />\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n    return { filters: state.filters };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    filter\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FilterForm);\r\n","import { action } from \"typesafe-actions\";\r\nimport { FiltersActionTypes, FiltersState } from \"./types\";\r\n\r\nexport const filter = (data: FiltersState) => action(FiltersActionTypes.FILTER, data);\r\n","import styled from 'styled-components'\r\nimport { Form } from 'formik';\r\n\r\nexport const SortingFormStyled = styled(Form)`\r\n    position: sticky;\r\n    top: 1rem\r\n`\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Formik, Field, Form } from \"formik\";\r\nimport { ApplicationState } from \"../../store\";\r\nimport { SortingFormStyled } from \"./SortingForm.styled\";\r\nimport { Option, SubmitButton, FormGroup, LabelStyled } from \"../SharedStyledComponents/Form.styled\";\r\nimport { sort } from \"../../store/sorting/actions\";\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> & typeof mapDispatchToProps;\r\n\r\nconst sortingTypes = [\r\n    { value: \"DATE_ASC\", label: \"Data - rosnąco\" },\r\n    { value: \"DATE_DESC\", label: \"Data - malejąco\" },\r\n    { value: \"REVIEW_ASC\", label: \"Ocena - rosnąco\" },\r\n    { value: \"REVIEW_DESC\", label: \"Ocena - malejąco\" }\r\n];\r\n\r\nconst SortingForm = (props: Props) => {\r\n    let { sorting } = props.sorting;\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                sorting: sorting\r\n            }}\r\n            onSubmit={(values: any) => {\r\n                console.log(values);\r\n                props.sort(values.sorting);\r\n            }}\r\n            render={() => (\r\n                <SortingFormStyled>\r\n                    <LabelStyled htmlFor=\"sorting\">Sortowanie</LabelStyled>\r\n                    <FormGroup>\r\n                        <Field name=\"sorting\" component=\"select\">\r\n                            {sortingTypes.map((s, index) => {\r\n                                return (\r\n                                    <Option value={s.value} key={index}>\r\n                                        {s.label}\r\n                                    </Option>\r\n                                );\r\n                            })}\r\n                        </Field>\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <SubmitButton type=\"submit\">Sortuj</SubmitButton>\r\n                    </FormGroup>\r\n                </SortingFormStyled>\r\n            )}\r\n        />\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n    return { sorting: state.sorting };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    sort\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SortingForm);\r\n","import { action } from \"typesafe-actions\";\r\nimport { SortingActionTypes, SortingState } from \"./types\";\r\n\r\nexport const sort = (data: SortingState) => action(SortingActionTypes.SORT, data);\r\n","import styled from 'styled-components';\r\nimport { COLORS, BREAKPOINTS } from '../../styles/variables';\r\n\r\ntype CardStyledProps = {\r\n    isPremium: boolean\r\n}\r\n\r\nexport const CardStyled = styled.div<CardStyledProps>`\r\n    padding: 1rem;\r\n    margin: 0.5rem;\r\n    /* border: 1px solid ${props => props.isPremium ? COLORS.golden : COLORS.lightgray}; */\r\n    border: 1px solid #ddd;\r\n    border-radius: 4px;\r\n    display: flex;\r\n    flex-direction: row;\r\n    box-sizing: border-box;\r\n    background: white;\r\n\r\n    -webkit-box-shadow: 0px 1px 10px 1px rgba(0, 0, 0, 0.15);\r\n    -moz-box-shadow: 0px 1px 10px 1px rgba(0, 0, 0, 0.15);\r\n    box-shadow: 0px 1px 10px 1px rgba(0, 0, 0, 0.15);\r\n\r\n    height: 18rem;\r\n\r\n    @media (max-width: ${BREAKPOINTS.md}) {\r\n        height: 22rem;\r\n    }\r\n\r\n    :hover {\r\n        background: #f6f6f6;\r\n    }\r\n`\r\n\r\nexport const CardImageWrapper = styled.div`\r\n    width: 16rem;\r\n    height: 16rem;\r\n\r\n    @media (max-width: ${BREAKPOINTS.md}) {\r\n        width: 10rem;\r\n        height: 10rem;\r\n    }\r\n`\r\n\r\nexport const CardContent = styled.div`\r\n    display: flex;\r\n        flex-direction: row;\r\n        justify-content: space-between;\r\n        width: 100%;\r\n\r\n        @media (max-width: ${BREAKPOINTS.md}) {\r\n            flex-direction: column;\r\n        }\r\n`\r\n\r\nexport const CardContentLeft = styled.div`\r\n    padding: 0 1rem;\r\n`\r\n\r\nexport const CardContentRight = styled.div`\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: space-between;\r\n        align-items: flex-end;\r\n\r\n        @media (max-width: ${BREAKPOINTS.md}) {\r\n            flex-direction: row;\r\n            align-items: flex-start;\r\n        }\r\n`\r\n\r\nexport const CardName = styled.span`\r\nfont-weight: bold;\r\n        font-size: 2rem;\r\n`\r\n\r\nexport const CardCity = styled.span`\r\ncolor: gray;\r\n        display: block;\r\n`\r\n\r\nexport const CardDescription = styled.div`\r\n    overflow: hidden;\r\n    position: relative;\r\n    line-height: 1.2em;\r\n    max-height: 6em;\r\n    text-align: justify;    \r\n    margin-right: -1em;\r\n    padding-right: 1em;\r\n\r\n    &:before {\r\n        content: '...';\r\n        position: absolute;\r\n        right: 0;\r\n        bottom: 0;\r\n        right: 1rem;\r\n        background-color: white;\r\n    }\r\n    &:after {\r\n        content: '';\r\n        position: absolute;\r\n        right: 0;\r\n        width: 1em;\r\n        height: 1em;\r\n        margin-top: 0.2em;\r\n        background: white;\r\n    }\r\n`\r\n\r\nexport const PremiumTag = styled.div`\r\n    color: ${COLORS.golden};\r\n`","import React from \"react\";\r\nimport Rating from \"../Rating/Rating\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { CardStyled, CardImageWrapper, CardContent, CardContentLeft, CardContentRight, CardDescription, CardCity, PremiumTag, CardName } from \"./Card.styled\";\r\nimport Avatar from \"../Avatar/Avatar\";\r\nimport { LinkStyled } from \"../Navbar/Navbar.styled\";\r\n\r\ntype Props = {\r\n    name: string;\r\n    image: string;\r\n    city: string;\r\n    isPremium: boolean;\r\n    description: string;\r\n    numberOfRatings: number;\r\n    id: string;\r\n    totalRating: number;\r\n};\r\n\r\nconst Card = (props: Props) => {\r\n    const { name, image, city, isPremium, description, numberOfRatings, id, totalRating } = props;\r\n    const profileURL = \"/profile/\" + id;\r\n    return (\r\n        <CardStyled isPremium={isPremium}>\r\n            <Link to={profileURL}>\r\n                <CardImageWrapper>\r\n                    <Avatar isFull={true} url={image}></Avatar>\r\n                </CardImageWrapper>\r\n            </Link>\r\n            <CardContent>\r\n                <CardContentLeft>\r\n                    <CardName>\r\n                        <LinkStyled to={profileURL}>{name}</LinkStyled>\r\n                    </CardName>\r\n                    {isPremium && <PremiumTag>&#10004;</PremiumTag>}\r\n                    <CardCity>{city}</CardCity>\r\n                    <CardDescription>{description}</CardDescription>\r\n                </CardContentLeft>\r\n                <CardContentRight>\r\n                    <Rating rating={totalRating} numberOfRatings={numberOfRatings} />\r\n                    <LinkStyled to={profileURL}>Zobacz wiecej</LinkStyled>\r\n                </CardContentRight>\r\n            </CardContent>\r\n        </CardStyled>\r\n    );\r\n};\r\n\r\nexport default Card;\r\n","import styled from 'styled-components';\r\nimport { NAV_HEIGHT, COLORS, BREAKPOINTS } from '../../styles/variables';\r\n\r\nexport const ProfileListStyled = styled.div`\r\n    position: relative;\r\n    width: 100%;\r\n    height: 100%;\r\n    display: grid;\r\n    grid-template-columns: 1fr 2fr 1fr;\r\n\r\n    @media (max-width: ${BREAKPOINTS.md}) {\r\n        display: flex;\r\n        flex-direction: column;\r\n    }\r\n`\r\n\r\nexport const ListData = styled.div`\r\n    border-left: 1px solid #ccc;\r\n    border-right: 1px solid #ccc;\r\n    box-sizing: border-box;\r\n`\r\n\r\nexport const ListFilters = styled.div`\r\n    padding: 1rem 2rem;\r\n    box-sizing: border-box;\r\n    height: 100%;\r\n`\r\n\r\nexport const ListSorting = styled.div`\r\n    padding: 1rem 2rem;\r\n    box-sizing: border-box;\r\n    height: 100%;\r\n`\r\n\r\nexport const LoadMoreButton = styled.button`\r\n    border: 1px solid ${COLORS.blue2};\r\n    background: ${COLORS.blue};\r\n    color: white;\r\n    padding: 1rem 2rem;\r\n    border-radius: 6px;\r\n    font-size: 1.5rem;\r\n    font-weight: bold;\r\n    cursor: pointer;\r\n`\r\n\r\nexport const ButtonWrapper = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    padding: 2rem 0;\r\n`\r\nexport const AllFetchedBadge = styled.div`\r\n    border-bottom: 1px solid ${COLORS.blue};\r\n    color: ${COLORS.blue};\r\n    padding: 1rem 2rem;\r\n    font-size: 1.5rem;\r\n    font-weight: bold;\r\n`","import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport FilterForm from \"../../components/FilterForm/FilterForm\";\r\nimport SortingForm from \"../../components/SortingForm/SortingForm\";\r\nimport Card from \"../../components/Card/Card\";\r\nimport BottomScrollListener from \"react-bottom-scroll-listener\";\r\nimport {\r\n    ListData,\r\n    ListFilters,\r\n    ListSorting,\r\n    ProfileListStyled,\r\n    LoadMoreButton,\r\n    ButtonWrapper,\r\n    AllFetchedBadge\r\n} from \"./ProfileList.styled\";\r\n\r\nimport { Profile as ProfileApi } from \"../../api\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport { ApplicationState } from \"../../store\";\r\nimport BarLoader from \"../../components/BarLoader/BarLoader\";\r\n\r\ntype Props = ReturnType<typeof mapStateToProps>;\r\n\r\nconst ProfileList = (props: Props) => {\r\n    const [profiles, setProfiles] = React.useState([] as any[]);\r\n    const [isFetching, setIsFetching] = React.useState(false);\r\n    const [allFetched, setAllFetched] = React.useState(false);\r\n\r\n    useEffect(() => {\r\n        setIsFetching(true);\r\n        fetchProfiles().then(res => {\r\n            console.log(res);\r\n\r\n            const profiles = filterProfiles(res.data.profiles);\r\n            setProfiles(profiles);\r\n            setIsFetching(false);\r\n        });\r\n    }, []);\r\n\r\n    // useEffect(() => {\r\n    //     const filters = props.filters;\r\n    //     const prevFilters = usePrevious({ filters });\r\n    //     if (prevFilters !== filters) {\r\n    //         console.log(\"update\");\r\n    //         setAllFetched(true);\r\n    //         filterProfilesInState();\r\n    //     }\r\n    // }, [props.filters]);\r\n\r\n    const fetchProfiles = () => {\r\n        return ProfileApi.getProfiles(profiles.length, props.filters);\r\n    };\r\n\r\n    const filterProfilesInState = () => {\r\n        setProfiles(filterProfiles(profiles));\r\n    };\r\n\r\n    const filterProfiles = (profiles: any) => {\r\n        //to do add more filters\r\n        let filteredProfiles = profiles\r\n            .map((profile: any) => profile.id)\r\n            .filter((value: any, index: any, self: any) => self.indexOf(value) === index); //only unique in case there are two equal profiles\r\n\r\n        filteredProfiles = filteredProfiles.filter((profile: any) => {\r\n            return profile.city === props.filters.city; //city\r\n        });\r\n\r\n        return profiles;\r\n    };\r\n\r\n    const tryFetchMore = () => {\r\n        if (!isFetching && !allFetched) {\r\n            setIsFetching(true);\r\n            fetchProfiles().then(res => {\r\n                console.log(res);\r\n                const fetchedProfiles = res.data.profiles;\r\n\r\n                if (fetchedProfiles.length === 0) {\r\n                    setAllFetched(true);\r\n                    setIsFetching(false);\r\n                } else {\r\n                    setProfiles(filterProfiles([...profiles, ...fetchedProfiles]));\r\n                    setIsFetching(false);\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <ProfileListStyled>\r\n                <ListFilters>\r\n                    <FilterForm />\r\n                </ListFilters>\r\n                <ListData>\r\n                    {profiles.map((item: any) => (\r\n                        <Card\r\n                            key={item.id}\r\n                            name={item.owner.displayName}\r\n                            image={item.owner.avatar}\r\n                            isPremium={false}\r\n                            city={item.city}\r\n                            description={item.descr}\r\n                            numberOfRatings={item.ratings.length}\r\n                            totalRating={item.totalRating}\r\n                            id={item.id}\r\n                        />\r\n                    ))}\r\n                    {isFetching && <BarLoader />}\r\n                    <ButtonWrapper>\r\n                        {!isFetching &&\r\n                            (allFetched ? (\r\n                                <AllFetchedBadge>Pobrano wszystkie profile</AllFetchedBadge>\r\n                            ) : (\r\n                                <LoadMoreButton onClick={tryFetchMore}>Załaduj więcej</LoadMoreButton>\r\n                            ))}\r\n                    </ButtonWrapper>\r\n                </ListData>\r\n                <ListSorting>\r\n                    <SortingForm />\r\n                </ListSorting>\r\n            </ProfileListStyled>\r\n\r\n            {/* <BottomScrollListener onBottom={tryFetchMore} offset={100} /> */}\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n    return { filters: state.filters };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(ProfileList);\r\n"],"sourceRoot":""}